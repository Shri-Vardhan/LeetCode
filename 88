/*************************************************************
* Author      : Shri
* Copyright   : Open-source (for learning purposes)
* Description : Merge Sorted Array
* Problem     : You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

                Merge nums2 into nums1 as one sorted array in-place.

                Note: The final sorted array should not be returned by the function, but instead stored inside the array nums1. 
                      To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, 
                      and the last n elements are set to 0 and should be ignored. nums2 has a length of n.
* Constraints : - nums1.length == m + n  
                - nums2.length == n  
                - 0 <= m, n <= 200  
                - 1 <= nums1[i], nums2[i] <= 10^9  
                - nums1 and nums2 are sorted in non-decreasing order
*************************************************************/
BRUTEFORCE:
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int j=0;
        for(int i=m ; i<nums1.length ; i++){
            nums1[i] = nums2[j];
            j++;
        }
        Arrays.sort(nums1);
        System.out.println(Arrays.toString(nums1));
        
    }
}

OPTIMISED:
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int i = m - 1;
        int j = n - 1;
        int point = m + n - 1;

        while (j >= 0) {
            if (i >= 0 && nums1[i] > nums2[j]) {
                nums1[point] = nums1[i];
                i--;
            } else {
                nums1[point] = nums2[j];
                j--;
            }
            point--;
        }
    }
}

